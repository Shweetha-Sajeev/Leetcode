You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 

Example 1:

https://leetcode.com/problems/merge-two-sorted-lists/description/ 

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

----------------------------------------------------------------------------------------------------------------------------------------------------------------

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        l1, l2 = list1, list2
        head = curr = ListNode()  # The base of our chai

        while l1 and l2:  # As we brew, we choose the best leaf or spice
            if l1.val < l2.val:  # Adding l1 into the mix
                curr.next = l1
                l1 = l1.next
            else:  # Adding l2 into the mix
                curr.next = l2
                l2 = l2.next
            
            curr = curr.next  # Stirring the pot, mixing it in
        
        curr.next = l1 if l1 else l2  # The final pour to complete the chai

        return head.next  # Serving the chai, leaving the empty pot behind














